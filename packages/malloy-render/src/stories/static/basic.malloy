source: products is duckdb.table("data/products.parquet") extend {

  view: records is {
    select: *
    limit: 1000
  }

  # bar_chart
  view: category_bar is {
    group_by: category
    aggregate: avg_retail is retail_price.avg()
  }

  view: flatten is {
    group_by: category
    aggregate: avg_retail is retail_price.avg()
    nest:
      # flatten
      mens is {
        aggregate:
          avg_price is retail_price.avg()
          total_cost is cost.sum()
        where: department="Men"
      }
      # flatten
      womens is {
        aggregate:
          avg_price is retail_price.avg()
          total_cost is cost.sum()
        where: department="Women"
      }

      # pivot
      test is {
        group_by: distribution_center_id
        aggregate: avg_retail is retail_price.avg()
        nest:
          # flatten
          mens is {
            aggregate:
              avg_price is retail_price.avg()
              total_cost is cost.sum()
            where: department="Men"
          }
          # flatten
          womens is {
            aggregate:
              avg_price1 is retail_price.avg()
              total_cost1 is cost.sum()
            where: department="Women"
          }
        where: distribution_center_id=1 or distribution_center_id=2
      }
  }

  view: formats is {
    group_by:
      `Test number` is "0.0123730499"
      Default is 0.0123730499
      # duration
      `# duration` is 0.0123730499
      # duration.terse
      `# duration.terse` is 0.0123730499
      # number="0.##"
      `# number=0.##` is 0.0123730499
      # duration number="0.##"
      `# duration number=0.##` is 0.0123730499
  }
};

source: uuid is duckdb.sql("SELECT 'Sample Text' AS text_column, 42 AS number_column, '123e4567-e89b-12d3-a456-426614174000'::UUID AS uuid_column, {'name': 'foo'} AS user") extend {
  view: details is {
    group_by: id is uuid_column,
    name is user.name,
  }
};